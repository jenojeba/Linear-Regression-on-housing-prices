{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2ec00c3e",
   "metadata": {
    "papermill": {
     "duration": 0.004401,
     "end_time": "2024-05-23T14:23:05.892002",
     "exception": false,
     "start_time": "2024-05-23T14:23:05.887601",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Task 1: LINEAR REGRESSION ON HOUSING PRICES"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f0b8543",
   "metadata": {
    "papermill": {
     "duration": 0.003531,
     "end_time": "2024-05-23T14:23:05.899833",
     "exception": false,
     "start_time": "2024-05-23T14:23:05.896302",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 1: Load data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e3de2268",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-23T14:23:05.910211Z",
     "iopub.status.busy": "2024-05-23T14:23:05.909103Z",
     "iopub.status.idle": "2024-05-23T14:23:06.981989Z",
     "shell.execute_reply": "2024-05-23T14:23:06.980574Z"
    },
    "papermill": {
     "duration": 1.081968,
     "end_time": "2024-05-23T14:23:06.985619",
     "exception": false,
     "start_time": "2024-05-23T14:23:05.903651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      CRIM    ZN  INDUS  CHAS     NX     RM   AGE     DIS  RAD    TAX  \\\n",
      "0  0.00632  18.0   2.31     0  0.538  6.575  65.2  4.0900    1  296.0   \n",
      "1  0.02731   0.0   7.07     0  0.469  6.421  78.9  4.9671    2  242.0   \n",
      "2  0.02729   0.0   7.07     0  0.469  7.185  61.1  4.9671    2  242.0   \n",
      "3  0.03237   0.0   2.18     0  0.458  6.998  45.8  6.0622    3  222.0   \n",
      "4  0.06905   0.0   2.18     0  0.458  7.147  54.2  6.0622    3  222.0   \n",
      "\n",
      "   PTRATIO       B  LSTAT  MEDV  \n",
      "0     15.3  396.90   4.98  24.0  \n",
      "1     17.8  396.90   9.14  21.6  \n",
      "2     17.8  392.83   4.03  34.7  \n",
      "3     18.7  394.63   2.94  33.4  \n",
      "4     18.7  396.90   5.33  36.2  \n",
      "\n",
      "CRIM       0\n",
      "ZN         0\n",
      "INDUS      0\n",
      "CHAS       0\n",
      "NX         0\n",
      "RM         0\n",
      "AGE        0\n",
      "DIS        0\n",
      "RAD        0\n",
      "TAX        0\n",
      "PTRATIO    0\n",
      "B          0\n",
      "LSTAT      0\n",
      "MEDV       0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "df = pd.read_csv('/kaggle/input/the-boston-housing-dataset/Boston (1).csv')\n",
    "\n",
    "# Display the first few rows of the dataset\n",
    "print(df.head())\n",
    "print()\n",
    "print(df.isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d398f18",
   "metadata": {
    "papermill": {
     "duration": 0.003892,
     "end_time": "2024-05-23T14:23:06.994764",
     "exception": false,
     "start_time": "2024-05-23T14:23:06.990872",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 2: Preprocess the Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d5ba5eaa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T14:23:07.004692Z",
     "iopub.status.busy": "2024-05-23T14:23:07.004244Z",
     "iopub.status.idle": "2024-05-23T14:23:07.015248Z",
     "shell.execute_reply": "2024-05-23T14:23:07.014111Z"
    },
    "papermill": {
     "duration": 0.020164,
     "end_time": "2024-05-23T14:23:07.019087",
     "exception": false,
     "start_time": "2024-05-23T14:23:06.998923",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define features and target variable\n",
    "X = df.drop('MEDV', axis=1)  # 'MEDV' is the column to predict\n",
    "y = df['MEDV']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82e0548c",
   "metadata": {
    "papermill": {
     "duration": 0.00417,
     "end_time": "2024-05-23T14:23:07.027187",
     "exception": false,
     "start_time": "2024-05-23T14:23:07.023017",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 3: Split the Data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f3753694",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T14:23:07.037722Z",
     "iopub.status.busy": "2024-05-23T14:23:07.036580Z",
     "iopub.status.idle": "2024-05-23T14:23:08.455724Z",
     "shell.execute_reply": "2024-05-23T14:23:08.454780Z"
    },
    "papermill": {
     "duration": 1.427298,
     "end_time": "2024-05-23T14:23:08.458419",
     "exception": false,
     "start_time": "2024-05-23T14:23:07.031121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6ea333a",
   "metadata": {
    "papermill": {
     "duration": 0.003458,
     "end_time": "2024-05-23T14:23:08.465701",
     "exception": false,
     "start_time": "2024-05-23T14:23:08.462243",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 4: Train the Linear Regression Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3ce8d8eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T14:23:08.475565Z",
     "iopub.status.busy": "2024-05-23T14:23:08.474527Z",
     "iopub.status.idle": "2024-05-23T14:23:08.605823Z",
     "shell.execute_reply": "2024-05-23T14:23:08.604625Z"
    },
    "papermill": {
     "duration": 0.138979,
     "end_time": "2024-05-23T14:23:08.608538",
     "exception": false,
     "start_time": "2024-05-23T14:23:08.469559",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "# Create the linear regression model\n",
    "model = LinearRegression()\n",
    "\n",
    "# Train the model on the training data\n",
    "model.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05a9fbe9",
   "metadata": {
    "papermill": {
     "duration": 0.003664,
     "end_time": "2024-05-23T14:23:08.616343",
     "exception": false,
     "start_time": "2024-05-23T14:23:08.612679",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 5: Evaluate the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d723ea12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T14:23:08.626079Z",
     "iopub.status.busy": "2024-05-23T14:23:08.625662Z",
     "iopub.status.idle": "2024-05-23T14:23:08.636164Z",
     "shell.execute_reply": "2024-05-23T14:23:08.635015Z"
    },
    "papermill": {
     "duration": 0.017972,
     "end_time": "2024-05-23T14:23:08.638222",
     "exception": false,
     "start_time": "2024-05-23T14:23:08.620250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 3.1890919658878016\n",
      "Mean Squared Error: 24.29111947497323\n",
      "Root Mean Squared Error: 4.9286021826653075\n",
      "R-squared: 0.668759493535636\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "\n",
    "# Predict the prices on the test set\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "# Calculate evaluation metrics\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = mse ** 0.5\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "\n",
    "print(f\"Mean Absolute Error: {mae}\")\n",
    "print(f\"Mean Squared Error: {mse}\")\n",
    "print(f\"Root Mean Squared Error: {rmse}\")\n",
    "print(f\"R-squared: {r2}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e45f2eb8",
   "metadata": {
    "papermill": {
     "duration": 0.003789,
     "end_time": "2024-05-23T14:23:08.646071",
     "exception": false,
     "start_time": "2024-05-23T14:23:08.642282",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 6: Visualize the Results "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e27e9f15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T14:23:08.656134Z",
     "iopub.status.busy": "2024-05-23T14:23:08.655731Z",
     "iopub.status.idle": "2024-05-23T14:23:09.334496Z",
     "shell.execute_reply": "2024-05-23T14:23:09.333105Z"
    },
    "papermill": {
     "duration": 0.686994,
     "end_time": "2024-05-23T14:23:09.337153",
     "exception": false,
     "start_time": "2024-05-23T14:23:08.650159",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Plot actual vs predicted prices\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.scatterplot(x=y_test, y=y_pred)\n",
    "plt.xlabel('Actual Prices')\n",
    "plt.ylabel('Predicted Prices')\n",
    "plt.title('Actual vs Predicted Housing Prices')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3adff3a3",
   "metadata": {
    "papermill": {
     "duration": 0.004384,
     "end_time": "2024-05-23T14:23:09.346396",
     "exception": false,
     "start_time": "2024-05-23T14:23:09.342012",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 4657107,
     "sourceId": 8421847,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.032038,
   "end_time": "2024-05-23T14:23:09.972894",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-23T14:23:02.940856",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
